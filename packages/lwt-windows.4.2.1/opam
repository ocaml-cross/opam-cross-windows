opam-version: "2.0"

synopsis: "Promises and event-driven I/O"

license: "MIT"
homepage: "https://github.com/ocsigen/lwt"
doc: "https://ocsigen.org/lwt/manual/"
bug-reports: "https://github.com/ocsigen/lwt/issues"

authors: [
  "Jérôme Vouillon"
  "Jérémie Dimino"
]
maintainer: "Pierre Boutillier <pierre.boutillier@laposte.net>"

dev-repo: "git+https://github.com/ocsigen/lwt.git"

depends: [
  "cppo" {build & >= "1.1.0"}
  "dune" {build}
  "ocaml-windows"
  "mmap-windows"
  "result-windows"
  "seq-windows"

  "bisect_ppx" {dev & >= "1.3.0"}
  "ocamlfind" {dev & >= "1.7.3-1"}
]

build: [
  ["dune" "build" "-x" "windows" "-p" "lwt" "-j" jobs]
]

description: "A promise is a value that may become determined in the future.

Lwt provides typed, composable promises. Promises that are resolved by I/O are
resolved by Lwt in parallel.

Meanwhile, OCaml code, including code creating and waiting on promises, runs in
a single thread by default. This reduces the need for locks or other
synchronization primitives. Code can be run in parallel on an opt-in basis."

url {
  src: "https://github.com/ocsigen/lwt/archive/4.2.1.tar.gz"
  checksum: "md5=9d648386ca0a9978eb9487de36b781cc"
}
